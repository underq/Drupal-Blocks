<?php

/**
 * Implementation of hook_menu().
 *
 * @return An array of menu items.
 */
function alg_block_menu() {
  $items = array();

  $items['page/1'] = array(
    'page callback' => '_alg_block_page_1',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * function callback for page 1
 *
 * @return boolean
 */
function _alg_block_page_1() {
  return 'Page NÂ°1';
}

/**
 * Implementation of hook_block().
 *
 * @param $op What kind of information to retrieve about the block. Possible values: list, configure, save, view.
 * @param $delta Which block to return.
 * @param $edit Data from a configuration form, if submitted.
 */
function alg_block_block($op = 'list', $delta = 0, $edit = array()) {
  static $path = '';
  if (empty($path)) {
    $path = drupal_get_path('module', 'alg_block') . '/blocks/';
  }

  switch ($op) {
    case 'list':
      $blocks = array();
      $blocks += _alg_block_path_parser($path);
      return $blocks;
      break;

    case 'view':
      if (file_exists($path . $delta . '.inc')) {
        include 'blocks/' . $delta . '.inc';
        return $delta;
      }
  }
}

/**
 * Parse path for found all files and return blocks info
 * 
 * @return array
 */
function _alg_block_path_parser($path) {
  $results = array();

  $files = file_scan_directory($path, '\.inc$', array('.', '..', '*.txt'));
  foreach ($files as $file) {
    $block = array();
    if (_alg_block_comment_parser($file, $block) !== FALSE) {
      $results += $block;
    }
  }
  return $results;
}

/**
 * Parse comments and create an array of block parametres
 *
 * @param string $filename
 * @return array()
 */
function _alg_block_comment_parser($file, &$block) {
  $result = array();
  $code = file_get_contents($file->filename);
  $pattern = '#@([a-zA-Z]*) ([\w-/ {\|}]*)#';
  if (preg_match_all($pattern, $code, $result) != 0) {
    if (!$block[$file->name] = array_combine($result[1], str_replace('|', "\n", $result[2]))) {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}