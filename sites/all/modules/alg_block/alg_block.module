<?php

/**
 * Implementation of hook_menu().
 *
 * @return An array of menu items.
 */
function alg_block_menu() {
  $items = array();

  $items['test/block'] = array(
    'page callback' => 'alg_display_test',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_block().
 *
 * @param $op What kind of information to retrieve about the block. Possible values: list, configure, save, view.
 * @param $delta Which block to return.
 * @param $edit Data from a configuration form, if submitted.
 */
function alg_block_block($op = 'list', $delta = 0, $edit = array()) {

  switch ($op) {
    case 'list':
      $blocks = array();
      $blocks['test'] = array(
        'info' => 'block de test',
        'status' => 1,
        'region' => 'footer',
        'visibility' => 0,
        'pages' => '',
        );
      $blocks += _alg_block_doc_parser();
      return $blocks;
      break;

    case 'view':
      $path = drupal_get_path('module', 'alg_block') . '/blocks/';
      if (file_exists($path . $delta . '.inc')) {
        include 'blocks/' . $delta . '.inc';
        return $delta();
      }
      else {
        return array();
      }
  }
}

function alg_display_test() {
  return TRUE;
}

/**
 * Parse files in includes dir for create block list
 * 
 * @return array
 */
function _alg_block_doc_parser() {
  $path = drupal_get_path('module', 'alg_block') . '/blocks';

  $files = file_scan_directory($path, '\.inc$', array('.', '..', '*.txt'));
  $results = array();
  foreach ($files as $file) {
    $results[$file->name] = _alg_block_file_scan_directory($file->filename);
  }

  return $results;
}

/**
 * Callback for file_scan_directory
 *
 * @param string $filename
 * @return array()
 */
function _alg_block_file_scan_directory($filename) {
  $code = file_get_contents($filename);
  $result = array();
  $pattern = '#@([a-zA-Z]*) (.*)#';
  preg_match_all($pattern, $code, $result);

  if (!$result = array_combine($result[1], $result[2])) {
    $result = array();
  }

  return $result;
}